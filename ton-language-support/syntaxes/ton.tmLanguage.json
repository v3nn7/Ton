{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "TON",
    "scopeName": "source.ton",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#types"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#identifiers"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.ton",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.ton",
                    "begin": "/\*",
                    "end": "\*/"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.ton",
                    "match": "\b(if|else|loop|from|to|in|return|while|for|switch|case|default|break|continue|import|macro|try|catch|finally|throw)\b"
                },
                {
                    "name": "keyword.declaration.ton",
                    "match": "\b(let|const|fn|var|struct|class|extends|public|private)\b"
                },
                {
                    "name": "keyword.operator.ton",
                    "match": "\b(typeof|sizeof|alignof|new)\b"
                },
                {
                    "name": "keyword.other.ton",
                    "match": "\b(print|this)\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.ton",
                    "match": "(=|\+=|-=|\*=|/=|%=)"
                },
                {
                    "name": "keyword.operator.arithmetic.ton",
                    "match": "(\+|\-|\*|/|%)"
                },
                {
                    "name": "keyword.operator.comparison.ton",
                    "match": "(==|!=|<|>|<=|>=)"
                },
                {
                    "name": "keyword.operator.logical.ton",
                    "match": "(&&|\|\||!)"
                },
                {
                    "name": "keyword.operator.bitwise.ton",
                    "match": "(&|\||~)"
                },
                {
                    "name": "keyword.operator.increment-decrement.ton",
                    "match": "(\+\+|--)"
                },
                {
                    "name": "keyword.operator.arrow.ton",
                    "match": "->"
                },
                {
                    "name": "keyword.operator.ternary.ton",
                    "match": "\?"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.ton",
                    "begin": """,
                    "end": """,
                    "patterns": [
                        {
                            "name": "constant.character.escape.ton",
                            "match": "\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.ton",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.ton",
                            "match": "\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.triple.ton",
                    "begin": """"",
                    "end": """"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.ton",
                            "match": "\\."
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.hex.ton",
                    "match": "0x[0-9a-fA-F]+"
                },
                {
                    "name": "constant.numeric.binary.ton",
                    "match": "0b[01]+"
                },
                {
                    "name": "constant.numeric.float.ton",
                    "match": "\b\d+\.\d+([eE][+-]?\d+)?\b"
                },
                {
                    "name": "constant.numeric.integer.ton",
                    "match": "\b\d+\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "support.type.ton",
                    "match": "\b(int|float|bool|string|void|char)\b"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.ton",
                    "match": "\b(true|false|null)\b"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.parenthesis.ton",
                    "match": "[()]"
                },
                {
                    "name": "punctuation.brace.ton",
                    "match": "[{}]"
                },
                {
                    "name": "punctuation.bracket.ton",
                    "match": "[\[\]]"
                },
                {
                    "name": "punctuation.separator.ton",
                    "match": "(,|:|;)"
                },
                {
                    "name": "punctuation.accessor.ton",
                    "match": "\."
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "entity.name.function.ton",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*\\("
                },
                {
                    "name": "variable.other.ton",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        }
    }
}